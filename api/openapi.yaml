openapi: 3.0.1
info:
  contact:
    email: zkong@gsma.com
    name: Zhen Kong
  description: This is the REST api specification for the Common-adapter layer
  title: Common-Adapter
  version: 0.0.1
servers:
- url: /api/v1/
tags:
- description: Receive Notification From Offchain Comms
  name: event
- description: Access to Contract Object
  name: contract
- description: Access to Signature of Contract
  name: signature
- description: Access to Usage of Contract
  name: usage
- description: Access to Settlement of Contract
  name: settlement
- description: Access to API status information
  name: status
- description: Access to discovery information
  name: discovery

paths:
  /discovery/msps:
    get:
      description: Show a list of all MSPs
      operationId: getDiscoveryMSPs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: A list of all discovered MSPs
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /discovery/msps/{mspid}:
    get:
      description: Show details for a specific MSP
      operationId: getDiscoveryMSP
      parameters:
      - description: Name of a MSP
        explode: false
        in: path
        name: mspid
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: Details about the requested MSP
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /status:
    get:
      description: Show version information of the API
      operationId: getApiStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - status
      x-eov-operation-handler: controllers/StatusController
  /contracts/event/:
    post:
      description: Webhook callback
      operationId: eventReceived
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Webhook event Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
                x-content-type: application/json
          description: Successful operation, returns Status message
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - event
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/EventController
  /contracts/:
    get:
      description: Show a list of all Contracts
      operationId: getContracts
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    post:
      description: Create a new Contract
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns created Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractID}:
    delete:
      description: Delete a Contract By its ID
      operationId: deleteContractByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: The Deleted Conctact Object
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    get:
      description: Get a Contract By its ID
      operationId: getContractByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: Response format, defaults to JSON if not passed.
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
          enum: [JSON, RAW]
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ContractResponse'
                  - $ref: '#/components/schemas/RAWContractResponse'
                x-content-type: application/json
          description: The Selected Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    put:
      description: Update existing Contract
      operationId: updateContractByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns updated Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractID}/send/:
   put:
      description: Set State to "SEND" and POST to Blochain adapter towards TargetMSP of the Contract 
      operationId: sendContractByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns sent Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractID}/signatures/:
    get:
      description: Get All signatures of a given Contract
      operationId: getSignatures
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Signatures
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractID}/signatures/{signatureID}:
    get:
      description: Get Signature Object by its ID
      operationId: getSignatureByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Signature ID
        explode: false
        in: path
        name: signatureID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
                x-content-type: application/json
          description: The Selected Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-eov-operation-handler: controllers/SignatureController
    put:
      description: Update Signature Object by its ID
      operationId: updateSignatureByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Signature ID
        explode: false
        in: path
        name: signatureID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureRequest'
        description: Signature Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
                x-content-type: application/json
          description: Successful operation, returns updated Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractID}/usages/:
    get:
      description: Get All usage of a given Contract
      operationId: getUsages
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Usages
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    post:
      description: Create a new Usage
      operationId: createUsage
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns created Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractID}/usages/{usageID}:
    get:
      description: Get Usage Object by its ID
      operationId: getUsageByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage ID
        explode: false
        in: path
        name: usageID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: The Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    put:
      description: Update Usage Object by its ID
      operationId: updateUsageByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage ID
        explode: false
        in: path
        name: usageID
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns updated Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
    delete:
      description: Delete a Usage By its ID
      operationId: deleteUsageByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage ID
        explode: false
        in: path
        name: usageID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: The Deleted Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractID}/usages/{usageID}/send/:
    put:
      description: Set State to "SEND" and POST to Blochain adapter towards TargetMSP of the Usage 
      operationId: sendUsageByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage ID
        explode: false
        in: path
        name: usageID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractID}/usages/{usageID}/generate/:
    put:
      description: Generate the "Settlement" with local calculator and POST to Blochain adapter towards TargetMSP of the calculated response. 
      operationId: generateUsageByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage ID
        explode: false
        in: path
        name: usageID
        required: true
        schema:
          type: string
        style: simple
      - description: Defaults to "preview" if not selected. Preview will only performs "calculation" and return the calculated settlement in response. if "commit", will create the settlement and Send it live to the Blockchain to the targetMSP.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          type: string
          enum: [preview, commit]
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractID}/settlements/:
    get:
      description: Get All Settlement of a given Contract
      operationId: getSettlements
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Settlements
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractID}/settlements/{settlementID}:
    get:
      description: Get Settlement Object by its ID
      operationId: getSettlementByID
      parameters:
      - description: The contract ID
        explode: false
        in: path
        name: contractID
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement ID
        explode: false
        in: path
        name: settlementID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: The Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController


components:
  schemas:
    Event:
      title: Event JSON
      type: object

    ContractResponse:
      title: Contract JSON
      type: object
      properties:
        contractID:
          type: string
          description: ContractID in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header:
          properties:
            name:
              type: string
              description: Human readable name for the contract.
              example: Contract with XYZ
            version:
              type: string
              description: Version of the contract
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "contract"
              enum: [contract]

            fromMSP:
              type: object
              properties:
                mspid:
                  type: string
                  description: MSPID of the contract creator.
                  example: DTAG
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1
              
            toMSP:
              type: object
              properties:
                mspid:
                  type: string
                  description: MSPID of the contract creator.
                  example: TMUS
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1

          required:
            - version
            - type
            - fromMSP
            - toMSP
        body:
          additionalProperties: true
        state:
          type: string
          description: The State of the Contract.
          enum: [DRAFT, PENDING, SENT, RECEIVED]
      additionalProperties: false
      required:
        - contractID
        - header
        - body
        - state

    RAWContractResponse:
      title: Contract RAW
      type: object
      properties:
        contractID:
          type: string
          description: ContractID in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        raw:
          type: string
          description: Original Base64 encoded RAW payload, Used for Hash calculation or Signing.
          example: eyJoZWFkZXIiOnsidmVyc2lvbiI6IjEuM....
        state:
          type: string
          description: The State of the Contract.
          enum: [DRAFT, PENDING, SENT, RECEIVED]
      additionalProperties: false
      required:
        - contractID
        - raw
        - state

    ContractRequest:
      title: Contract JSON for POST/PUT
      type: object
      properties:
        header:
          properties:
            name:
              type: string
              description: Human readable name for the contract.
              example: Contract with XYZ
            version:
              type: string
              description: Version of the contract
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "contract"
              enum: [contract]

            fromMSP:
              type: object
              properties:
                mspid:
                  type: string
                  description: MSPID of the contract creator.
                  example: DTAG
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1
              
            toMSP:
              type: object
              properties:
                mspid:
                  type: string
                  description: MSPID of the contract creator.
                  example: TMUS
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1

          additionalProperties: false
          required:
            - version
            - type
            - fromMSP
            - toMSP
        body:
          additionalProperties: true
      additionalProperties: false
      required:
        - header
        - body

    SignatureBase:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string


    SignatureResponse:
      title: Signature JSON
      type: object
      properties:
        signatureID:
          type: string
          description: signatureID from \"contract"->\"signature\"->\"\<MSPID\>\"[X]->\"id\"
          example: XXXXXX

        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
        extra:
          type: object
          description: Additional Key/Value from \"contract"->\"signature\"->\"\<MSPID\>\"[X]->XXX, eg name, role
          example: '{"name":"john doe", "role":"manager"}'
      additionalProperties: false
      required:
      - signatureID
      - algorithm
      - certificate
      - signature
      - extra

    SignatureRequest:
      title: Signature JSON for PUT
      type: object
      properties:
        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
      additionalProperties: false
      required:
      - algorithm
      - certificate
      - signature


    UsageResponse:
      title: Usage JSON
      type: object
      properties:
        usageID:
          type: string
          description: usageID in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header:
          properties:
            name:
              type: string
              description: Human readable name for the usage.
              example: Usage, from ABC to XYZ
            version:
              type: string
              description: Version of the usage
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "usage"
              enum: [usage]
            mspOwner:
              type: string
              description: the MSP which gives the Inbound traffic data
              additionalProperties: true    
          additionalProperties: false
          required:
            - version
            - type
        body:
          additionalProperties: true
        state:
          type: string
          description: The State of the Usage.
          enum: [DRAFT, SENT, RECEIVED]
      required:
        - usageID
        - header
        - body
        - state


    UsageRequest:
      title: Usage JSON for POST/PUT
      type: object
      properties:
        header:
          properties:
            name:
              type: string
              description: Human readable name for the usage.
              example: Usage, from ABC to XYZ
            version:
              type: string
              description: Version of the usage
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "usage"
              enum: [usage]
          additionalProperties: false
          required:
            - version
            - type
        body:
          additionalProperties: true
      required:
        - header
        - body



    Settlement:
      title: Settlement JSON
      type: object
    SuccessResponse:
      title: Success Response JSON
      type: object
      properties:
        status:
          type: string
          description: Outcome of the operation
          example: OK
        description:
          type: string
          description: Description of the operation
          example: XXXX Operation successful
      required:
        - status
    400ErrorResponse:
      title: 400 Error Response JSON
      type: object
      properties:
        error:
          type: string
          description: a list of pre-defined error names
          example: invalid_request
        description:
          type: string
          description: Text Description of the error
          example: The Request is invalid
      required:
        - error
        - description