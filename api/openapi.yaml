openapi: 3.0.1
info:
  contact:
    email: zkong@gsma.com
    name: Zhen Kong
  description: This is the REST api specification for the Common-adapter layer
  title: Common-Adapter
  version: 0.0.1
servers:
- url: /api/v1/
tags:
- description: Receive Notification From Offchain Comms
  name: event
- description: Access to Contract Object
  name: contract
- description: Access to Signature of Contract
  name: signature
- description: Access to Usage of Contract
  name: usage
- description: Access to Settlement of Contract
  name: settlement
- description: Access to API status information
  name: status
- description: Access to discovery information
  name: discovery

paths:
  /discovery/msps:
    get:
      description: Show a list of all Msps
      operationId: getDiscoveryMsps
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
              example: ['GSMA', 'AnotherMSP']
          description: A list of all discovered Msps
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /discovery/msps/{mspId}:
    get:
      description: Show details for a specific Msp
      operationId: getDiscoveryMsp
      parameters:
      - description: Name of a Msp
        explode: false
        in: path
        name: mspId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Msp'
          description: Details about the requested Msp
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /status:
    get:
      description: Show version information of the API
      operationId: getApiStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                additionalProperties: true
                properties:
                  commitHash:
                    type: string
                  apiHash:
                    type: string
                  apiVersion:
                    type: string
                example:
                  commitHash: "unknown"
                  apiHash: "unknown"
                  apiVersion: "?.?.?"
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - status
      x-eov-operation-handler: controllers/StatusController
  /contracts/event/:
    post:
      description: Webhook callback
      operationId: eventReceived
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Webhook event Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventResponse'
          description: Successful operation, returns list of uploaded documents
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - event
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/EventController
  /contracts/:
    get:
      description: Show a list of all Contracts
      operationId: getContracts
      parameters:
      - description: One or more MSPs
        in: query
        name: withMSPs
        schema:
          type: array
          items:
            type: string
        style: pipeDelimited
        explode: false
        examples:
          oneMSP:
            summary: Example of a single MSP
            value: ['GSMA']
          multipleMSPs:
            summary: Example of multiple MSPs
            value: ['GSMA', 'OrdererMSP']
      - description: One or more states
        in: query
        name: states
        schema:
          type: array
          items:
            type: string
        style: pipeDelimited
        explode: false
        examples:
          oneState:
            summary: Example of a single state
            value: ['DRAFT']
          multipleStates:
            summary: Example of multiple states
            value: ['SENT', 'RECEIVED']
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    post:
      description: Create a new Contract
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns created Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}:
    delete:
      description: Delete a Contract By its Id
      operationId: deleteContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: The Deleted Conctact Object
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    get:
      description: Get a Contract By its Id
      operationId: getContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: Response format, defaults to JSON if not passed.
        explode: true
        in: query
        name: format
        required: false
        schema:
          type: string
          enum: [JSON, RAW]
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ContractResponse'
                  - $ref: '#/components/schemas/RAWContractResponse'
                x-content-type: application/json
          description: The Selected Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    put:
      description: Update existing Contract
      operationId: updateContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns updated Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}/send/:
   put:
      description: Set State to "SEND" and POST to Blochain adapter towards TargetMsp of the Contract 
      operationId: sendContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
                x-content-type: application/json
          description: Successful operation, returns sent Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}/signatures/:
    get:
      description: Get All signatures of a given Contract
      operationId: getSignatures
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Signatures
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-eov-operation-handler: controllers/SignatureController
    post:
      description: Create/Upload Signature
      operationId: createSignature
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureRequest'
        description: Signature Object Payload
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
          description: Successful operation, returns updated Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/signatures/{signatureId}:
    get:
      description: Get Signature Object by its Id
      operationId: getSignatureById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The Signature Id
          explode: false
          in: path
          name: signatureId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
                x-content-type: application/json
          description: The Selected Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/usages/{usageId}/signatures/:
    get:
      description: Get All signatures of a given Usage
      operationId: getUsageSignatures
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The usage Id
          explode: false
          in: path
          name: usageId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Signatures
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-eov-operation-handler: controllers/SignatureController
    post:
      description: Create/Upload Signature
      operationId: createUsageSignature
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The usage Id
          explode: false
          in: path
          name: usageId
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureRequest'
        description: Signature Object Payload
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
          description: Successful operation, returns updated Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/usages/{usageId}/signatures/{signatureId}:
    get:
      description: Get Signature Object by its Id
      operationId: getUsageSignatureById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The usage Id
          explode: false
          in: path
          name: usageId
          required: true
          schema:
            type: string
          style: simple
        - description: The Signature Id
          explode: false
          in: path
          name: signatureId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
                x-content-type: application/json
          description: The Selected Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - signature
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/usages/:
    get:
      description: Get All usage of a given Contract
      operationId: getUsages
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: One or more states
        in: query
        name: states
        schema:
          type: array
          items:
            type: string
        style: pipeDelimited
        explode: false
        examples:
          oneState:
            summary: Example of a single state
            value: ['DRAFT']
          multipleStates:
            summary: Example of multiple states
            value: ['SENT', 'RECEIVED']
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Usages
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    post:
      description: Create a new Usage
      operationId: createUsage
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns created Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}:
    get:
      description: Get Usage Object by its Id
      operationId: getUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: The Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    put:
      description: Update Usage Object by its Id
      operationId: updateUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns updated Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
    delete:
      description: Delete a Usage By its Id
      operationId: deleteUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: The Deleted Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/discrepancy/:
    get:
      description: Get the discrepancy between an usage and a given partner usage. 
      operationId: getUsageDiscrepancy
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the partner usage to compare
        explode: false
        in: query
        name: partnerUsageId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageDiscrepancy'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/generate/:
    put:
      description: Generate the "Settlement" with local calculator and POST to Blochain adapter towards TargetMsp of the calculated response. 
      operationId: generateUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      - description: By default, for undefined mode, will calculate and store a new settlement. If "preview" mode is selected, will not store the calculated settlement. If "commit" mode is selected, will store and send the calculated settlement.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          type: string
          enum: [preview, commit]
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/send/:
    put:
      description: Set State to "SEND" and POST to Blockchain adapter towards TargetMsp of the Usage
      operationId: sendUsageById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The Usage Id
          explode: false
          in: path
          name: usageId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/reject/:
    put:
      description: Set Tag to "REJECTED"
      operationId: rejectUsageById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The Usage Id
          explode: false
          in: path
          name: usageId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/settlements/:
    get:
      description: Get All Settlement of a given Contract
      operationId: getSettlements
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Settlements
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}:
    get:
      description: Get Settlement Object by its Id
      operationId: getSettlementById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement Id
        explode: false
        in: path
        name: settlementId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: The Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}/discrepancy/:
    get:
      description: Get the discrepancy between a settlement and a given partner settlement. 
      operationId: getSettlementDiscrepancy
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement Id
        explode: false
        in: path
        name: settlementId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the partner settlement to compare
        explode: false
        in: query
        name: partnerSettlementId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettlementDiscrepancy'
                x-content-type: application/json
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}/send/:
    put:
      description: Set State to "SEND" and POST to Blockchain adapter towards TargetMsp of the Usage
      operationId: sendSettlementById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The Settlement Id
          explode: false
          in: path
          name: settlementId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: Successful operation, returns sent Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}/reject/:
    put:
      description: Set Tag to "REJECTED"
      operationId: rejectSettlementById
      parameters:
        - description: The contract Id
          explode: false
          in: path
          name: contractId
          required: true
          schema:
            type: string
          style: simple
        - description: The Settlement Id
          explode: false
          in: path
          name: settlementId
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
                x-content-type: application/json
          description: Successful operation, returns sent Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
                x-content-type: application/json
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
        - settlement
      x-eov-operation-handler: controllers/SettlementController


components:
  schemas:
    Msp:
      title: Msp JSON
      type: object
      additionalProperties: true
      properties:
        id:
          type: string
        name:
          type: string
        organizationalUnitIdentifiers:
          type: array
          items:
            type: string
        rootCerts:
          type: string
        intermediateCerts:
          type: string
        admins:
          type: string
        tlsRootCerts:
          type: string
        tlsIntermediateCerts:
          type: string
      example:
        id: GSMA
        name: GSMA
        organizationalUnitIdentifiers: []
        rootCerts: "-----BEGIN CERTIFICATE-----\nMIIC...==\n-----END CERTIFICATE-----\n"
        intermediateCerts: intermediateCerts
        admins: admins
        tlsRootCerts: "-----BEGIN CERTIFICATE-----\nMIIC...==\n-----END CERTIFICATE-----\n"
        tlsIntermediateCerts: tlsIntermediateCerts

    Event:
      title: Event JSON
      type: object
      additionalProperties: true
      properties:
        msp:
          type: string
        eventName:
          type: string
        timestamp:
          type: string
        data:
          type: object
          additionalProperties: true
          properties:
            storageKey:
              type: string
      example:
        msp: eventMsp
        eventName: STORE:PAYLOADLINK
        timestamp: '2020-11-30T16:59:35Z'
        data:
          storageKey: storageKey

    ContractResponse:
      title: Contract JSON
      type: object
      properties:
        contractId:
          type: string
          description: ContractId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header:
          properties:
            name:
              type: string
              description: Human readable name for the contract.
              example: Contract with XYZ
            version:
              type: string
              description: Version of the contract
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "contract"
              enum: [contract]

            fromMsp:
              type: object
              properties:
                mspId:
                  type: string
                  description: mspId of the contract creator.
                  example: DTAG
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1
              
            toMsp:
              type: object
              properties:
                mspId:
                  type: string
                  description: mspId of the contract creator.
                  example: TMUS
                signatures:
                  type: array
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1

          required:
            - version
            - type
            - fromMsp
            - toMsp
        body:
          $ref: '#/components/schemas/ContractBody'
        state:
          type: string
          description: The State of the Contract.
          enum: [DRAFT, PENDING, SENT, RECEIVED]
      additionalProperties: false
      required:
        - contractId
        - header
        - body
        - state

    RAWContractResponse:
      title: Contract RAW
      type: object
      properties:
        contractId:
          type: string
          description: ContractId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        raw:
          type: string
          description: Original Base64 encoded RAW payload, Used for Hash calculation or Signing.
          example: eyJoZWFkZXIiOnsidmVyc2lvbiI6IjEuM....
        state:
          type: string
          description: The State of the Contract.
          enum: [DRAFT, PENDING, SENT, RECEIVED]
      additionalProperties: false
      required:
        - contractId
        - raw
        - state

    ContractRequest:
      title: Contract JSON for POST/PUT
      type: object
      example:
        header:
          name: Contract with XYZ
          type: contract
          version: "1.0"
          msps:
            DTAG:
              signatures:
              - role: role
                name: name
                id: id
              - role: role
                name: name
                id: id
            TMUS:
              signatures:
              - role: role
                name: name
                id: id
              - role: role
                name: name
                id: id
        body:
          key: {}
      properties:
        header:
          type: object
          oneOf:
          - $ref: '#/components/schemas/ContractRequest_header'
          - $ref: '#/components/schemas/ContractRequest_header2'
        body:
          $ref: '#/components/schemas/ContractBody'
      additionalProperties: false
      required:
        - header
        - body

    SignatureBase:
      type: object
      example:
        role: role
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string


    SignatureResponse:
      title: Signature JSON
      type: object
      properties:
        signatureId:
          type: string
          description: signatureId from \"signature\"->\"\<mspId\>\"[X]->\"id\"
          example: XXXXXX

        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
        extra:
          type: object
          description: Additional Key/Value from \"signature\"->\"\<mspId\>\"[X]->XXX, eg name, role
          example: '{"name":"john doe", "role":"manager"}'
      additionalProperties: false
      required:
      - signatureId
      - algorithm
      - certificate
      - signature
      - extra

    SignatureRequest:
      title: Signature JSON for PUT
      type: object
      properties:
        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
      additionalProperties: false
      required:
      - algorithm
      - certificate
      - signature


    UsageResponse:
      title: Usage JSON
      type: object
      properties:
        usageId:
          type: string
          description: usageId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header:
          properties:
            name:
              type: string
              description: Human readable name for the usage.
              example: Usage, from ABC to XYZ
            version:
              type: string
              description: Version of the usage
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "usage"
              enum: [usage]
            mspOwner:
              type: string
              description: the Msp which gives the Inbound traffic data
              additionalProperties: true    
          additionalProperties: false
          required:
            - version
            - type
        body:
          additionalProperties: true
        state:
          type: string
          description: The State of the Usage.
          enum: [DRAFT, SENT, RECEIVED]
      required:
        - usageId
        - header
        - body
        - state

    UsageRequest:
      title: Usage JSON for POST/PUT
      type: object
      properties:
        header:
          properties:
            name:
              type: string
              description: Human readable name for the usage.
              example: Usage, from ABC to XYZ
            version:
              type: string
              description: Version of the usage
              example: 1.0
            type:
              type: string
              description: Type of document. MUST be "usage"
              enum: [usage]
          additionalProperties: false
          required:
            - version
            - type
        body:
          additionalProperties: true
      required:
        - header
        - body

    UsageDiscrepancy:
      title: Usage Discrepancy JSON
      type: object

    SettlementDiscrepancy:
      title: Settlement Discrepancy JSON
      type: object

    Settlement:
      title: Settlement JSON
      type: object

    EventResponse:
      title: Event Response JSON
      type: array
      items:
        type: object
        additionalProperties: false
        properties:
          id:
            type: string
          type:
            type: string
          referenceId:
            type: string
        example:
          id: id
          type: contract
          referenceId: referenceId

    400ErrorResponse:
      title: 400 Error Response JSON
      type: object
      properties:
        error:
          type: string
          description: a list of pre-defined error names
          example: invalid_request
        description:
          type: string
          description: Text Description of the error
          example: The Request is invalid
      required:
        - error
        - description

    ContractRequest_header_fromMsp:
      example:
        mspId: DTAG
        signatures:
        - role: role
          name: name
          id: id
        - role: role
          name: name
          id: id
      properties:
        mspId:
          description: mspId of the contract creator.
          example: DTAG
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/SignatureBase'
          minItems: 1
          type: array
      type: object

    ContractRequest_header_toMsp:
      example:
        mspId: TMUS
        signatures:
        - role: role
          name: name
          id: id
        - role: role
          name: name
          id: id
      properties:
        mspId:
          description: mspId of the contract creator.
          example: TMUS
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/SignatureBase'
          minItems: 1
          type: array
      type: object

    ContractRequest_header:
      example:
        fromMsp:
          mspId: DTAG
          signatures:
          - role: role
            name: name
            id: id
          - role: role
            name: name
            id: id
        name: Contract with XYZ
        toMsp:
          mspId: TMUS
          signatures:
          - role: role
            name: name
            id: id
          - role: role
            name: name
            id: id
        type: contract
        version: "1.0"
      properties:
        name:
          type: string
          description: Human readable name for the contract.
          example: Contract with XYZ
        version:
          type: string
          description: Version of the contract
          example: 1.0
        type:
          type: string
          description: Type of document. MUST be "contract"
          enum: [contract]
        fromMsp:
          $ref: '#/components/schemas/ContractRequest_header_fromMsp'
        toMsp:
          $ref: '#/components/schemas/ContractRequest_header_toMsp'
      required:
        - version
        - type
        - fromMsp
        - toMsp

    ContractRequest_header2_msp:
      type: object
      additionalProperties: true
      properties:
        signatures:
          type: array
          items:
            $ref: '#/components/schemas/SignatureBase'
      example:
        signatures:
        - role: role
          name: name
          id: id
        - role: role
          name: name
          id: id

    ContractRequest_header2:
      type: object
      additionalProperties: true
      properties:
        name:
          description: Human readable name for the contract.
          example: Contract with XYZ
          type: string
        version:
          description: Version of the contract
          example: "1.0"
          type: string
        type:
          description: Type of document. MUST be "contract"
          enum:
          - contract
          type: string
        msps:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContractRequest_header2_msp'
      required:
      - version
      - type
      - msps

    ContractBody_msp_discount_serviceGroup_service_rate_threshold:
      type: object
      additionalProperties: true
      properties:
        start:
          type: number
        fixedPrice:
          type: number
        linearPrice:
          type: number

    ContractBody_msp_discount_serviceGroup_service:
      type: object
      additionalProperties: true
      properties:
        service:
          type: string
        usagePricing:
          type: object
          additionalProperties: true
          properties:
            unit:
              type: string
            ratingPlan:
              type: object
              additionalProperties: true
              properties:
                kind:
                  type: string
                balancedRate:
                  type: object
                  additionalProperties: true
                  properties:
                    linearPrice:
                      type: number
                    thresholds:
                      type: array
                      items:
                        $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup_service_rate_threshold'
                unbalancedRate:
                  type: object
                  additionalProperties: true
                  properties:
                    thresholds:
                      type: array
                      items:
                        $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup_service_rate_threshold'
                rate:
                  type: object
                  additionalProperties: true
                  properties:
                    thresholds:
                      type: array
                      items:
                        $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup_service_rate_threshold'
        accessPricing:
          type: object
          additionalProperties: true
          properties:
            unit:
              type: string
            ratingPlan:
              type: object
              additionalProperties: true
              properties:
                kind:
                  type: string
                rate:
                  type: object
                  additionalProperties: true
                  properties:
                    linearPrice:
                      type: number
                    thresholds:
                      type: array
                      items:
                        $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup_service_rate_threshold'

    ContractBody_msp_discount_serviceGroup:
      type: object
      additionalProperties: true
      properties:
        homeTadigs:
          type: array
          items:
            type: string
          example: ['GSMA-TADIG-1', 'GSMA-TADIG-2']
        visitorTadigs:
          type: array
          items:
            type: string
          example: ['AnotherMSP-TADIG-1', 'AnotherMSP-TADIG-2', 'AnotherMSP-TADIG-3']
        services:
          type: array
          items:
            $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup_service'
          example:
          - service: "MOC Local"
            usagePricing:
              unit: "eur"
              ratingPlan:
                kind: "Linear rate"
                rate:
                  linearPrice: 0.145
          - service: "SMSMO"
            usagePricing:
              unit: "eur"
              ratingPlan:
                kind: "Linear rate"
                rate:
                  thresholds:
                  - start: 0
                    linearPrice: 0.256
                  - start: 5000
                    linearPrice: 0.050

    ContractBody_msp_discount:
      type: object
      additionalProperties: true
      properties:
        condition:
          type: object
          additionalProperties: true
          example:
            kind: "Unconditional"
        serviceGroups:
          type: array
          items:
            $ref: '#/components/schemas/ContractBody_msp_discount_serviceGroup'

    ContractBody:
      type: object
      additionalProperties: true
      properties:
        version:
          type: string
          example: 0.0.2-MVP1
        metadata:
          type: object
          additionalProperties: true
          properties:
            name:
              type: string
            authors:
              type: string
          example:
            name: Contract-Name-Chosen
            authors: author1 & author2
        discounts:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/ContractBody_msp_discount'
        framework:
          type: object
          additionalProperties: true
          properties:
            term:
              type: object
              additionalProperties: true
            payment:
              type: object
              additionalProperties: true
            partyInformation:
              type: object
              additionalProperties: true
          example:
            term:
              start: 2020-01-01T00:00:00.000Z
              end: 2020-12-31T00:00:00.000Z
            payment:
              taxesIncluded: false
              
