openapi: 3.0.1
info:
  contact:
    email: zkong@gsma.com
    name: Zhen Kong
  description: This is the REST api specification for the Common-adapter layer
  title: Common-Adapter
  version: 0.0.1
servers:
- url: /api/v1/
tags:
- description: Receive Notification From Offchain Comms
  name: event
- description: Access to Contract Object
  name: contract
- description: Access to Signature of Contract
  name: signature
- description: Access to Usage of Contract
  name: usage
- description: Access to Settlement of Contract
  name: settlement
- description: Access to API status information
  name: status
- description: Access to discovery information
  name: discovery
paths:
  /discovery/msps:
    get:
      description: Show a list of all Msps
      operationId: getDiscoveryMsps
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: A list of all discovered Msps
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /discovery/msps/{mspId}:
    get:
      description: Show details for a specific Msp
      operationId: getDiscoveryMsp
      parameters:
      - description: Name of a Msp
        explode: false
        in: path
        name: mspId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: Details about the requested Msp
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - discovery
      x-eov-operation-handler: controllers/DiscoveryController
  /status:
    get:
      description: Show version information of the API
      operationId: getApiStatus
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - status
      x-eov-operation-handler: controllers/StatusController
  /contracts/event/:
    post:
      description: Webhook callback
      operationId: eventReceived
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        description: Webhook event Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
          description: Successful operation, returns Status message
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - event
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/EventController
  /contracts/:
    get:
      description: Show a list of all Contracts
      operationId: getContracts
      parameters:
      - description: One or more MSPs
        examples:
          oneMSP:
            summary: Example of a single MSP
            value:
            - GSMA
          multipleMSPs:
            summary: Example of multiple MSPs
            value:
            - GSMA
            - OrdererMSP
        explode: false
        in: query
        name: withMSPs
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      - description: One or more states
        examples:
          oneState:
            summary: Example of a single state
            value:
            - DRAFT
          multipleStates:
            summary: Example of multiple states
            value:
            - SENT
            - RECEIVED
        explode: false
        in: query
        name: states
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: The status of the service
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    post:
      description: Create a new Contract
      operationId: createContract
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: Successful operation, returns created Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}:
    delete:
      description: Delete a Contract By its Id
      operationId: deleteContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: The Deleted Conctact Object
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    get:
      description: Get a Contract By its Id
      operationId: getContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: Response format, defaults to JSON if not passed.
        explode: true
        in: query
        name: format
        required: false
        schema:
          enum:
          - JSON
          - RAW
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/ContractResponse'
                - $ref: '#/components/schemas/RAWContractResponse'
                x-content-type: application/json
          description: The Selected Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
    put:
      description: Update existing Contract
      operationId: updateContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContractRequest'
        description: Contract Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: Successful operation, returns updated Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}/send/:
    put:
      description: Set State to "SEND" and POST to Blochain adapter towards TargetMsp
        of the Contract
      operationId: sendContractById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContractResponse'
          description: Successful operation, returns sent Contract Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - contract
      x-eov-operation-handler: controllers/ContractController
  /contracts/{contractId}/signatures/:
    get:
      description: Get All signatures of a given Contract
      operationId: getSignatures
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Signatures
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-eov-operation-handler: controllers/SignatureController
    post:
      description: Create/Upload Signature
      operationId: createSignature
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatureRequest'
        description: Signature Object Payload
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
          description: Successful operation, returns updated Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/signatures/{signatureId}:
    get:
      description: Get Signature Object by its Id
      operationId: getSignatureById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Signature Id
        explode: false
        in: path
        name: signatureId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatureResponse'
          description: The Selected Signature Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - signature
      x-eov-operation-handler: controllers/SignatureController
  /contracts/{contractId}/usages/:
    get:
      description: Get All usage of a given Contract
      operationId: getUsages
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: One or more states
        examples:
          oneState:
            summary: Example of a single state
            value:
            - DRAFT
          multipleStates:
            summary: Example of multiple states
            value:
            - SENT
            - RECEIVED
        explode: false
        in: query
        name: states
        required: false
        schema:
          items:
            type: string
          type: array
        style: pipeDelimited
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Usages
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    post:
      description: Create a new Usage
      operationId: createUsage
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Successful operation, returns created Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}:
    delete:
      description: Delete a Usage By its Id
      operationId: deleteUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: The Deleted Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    get:
      description: Get Usage Object by its Id
      operationId: getUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: The Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
    put:
      description: Update Usage Object by its Id
      operationId: updateUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsageRequest'
        description: Usage Object Payload
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Successful operation, returns updated Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-codegen-request-body-name: body
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/discrepancy/:
    get:
      description: Get the discrepancy between an usage and a given partner usage.
      operationId: getUsageDiscrepancy
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the partner usage to compare
        explode: false
        in: query
        name: partnerUsageId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageDiscrepancy'
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/generate/:
    put:
      description: Generate the "Settlement" with local calculator and POST to Blochain
        adapter towards TargetMsp of the calculated response.
      operationId: generateUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      - description: Defaults to "preview" if not selected. Preview will only performs
          "calculation" and return the calculated settlement in response. if "commit",
          will create the settlement and Send it live to the Blockchain to the targetMsp.
        explode: true
        in: query
        name: mode
        required: false
        schema:
          enum:
          - preview
          - commit
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/usages/{usageId}/send/:
    put:
      description: Set State to "SEND" and POST to Blockchain adapter towards TargetMsp
        of the Usage
      operationId: sendUsageById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Usage Id
        explode: false
        in: path
        name: usageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - usage
      x-eov-operation-handler: controllers/UsageController
  /contracts/{contractId}/settlements/:
    get:
      description: Get All Settlement of a given Contract
      operationId: getSettlements
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
          description: List of available Settlements
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}:
    get:
      description: Get Settlement Object by its Id
      operationId: getSettlementById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement Id
        explode: false
        in: path
        name: settlementId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: The Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}/discrepancy/:
    get:
      description: Get the discrepancy between a settlement and a given partner settlement.
      operationId: getSettlementDiscrepancy
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement Id
        explode: false
        in: path
        name: settlementId
        required: true
        schema:
          type: string
        style: simple
      - description: The id of the partner settlement to compare
        explode: false
        in: query
        name: partnerSettlementId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SettlementDiscrepancy'
          description: Successful operation, returns sent Usage Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
  /contracts/{contractId}/settlements/{settlementId}/send/:
    put:
      description: Set State to "SEND" and POST to Blockchain adapter towards TargetMsp
        of the Usage
      operationId: sendSettlementById
      parameters:
      - description: The contract Id
        explode: false
        in: path
        name: contractId
        required: true
        schema:
          type: string
        style: simple
      - description: The Settlement Id
        explode: false
        in: path
        name: settlementId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Settlement'
          description: Successful operation, returns sent Settlement Object
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400ErrorResponse'
          description: Bad Request
        "500":
          content: {}
          description: Internal Error
      tags:
      - settlement
      x-eov-operation-handler: controllers/SettlementController
components:
  schemas:
    Event:
      title: Event JSON
      type: object
    ContractResponse:
      additionalProperties: false
      example:
        contractId: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header: '{}'
        state: DRAFT
        body:
          key: '{}'
      properties:
        contractId:
          description: ContractId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
          type: string
        header:
          properties:
            name:
              description: Human readable name for the contract.
              example: Contract with XYZ
              type: string
            version:
              description: Version of the contract
              example: "1.0"
              type: string
            type:
              description: Type of document. MUST be "contract"
              enum:
              - contract
              type: string
            fromMsp:
              properties:
                mspId:
                  description: mspId of the contract creator.
                  example: DTAG
                  type: string
                signatures:
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1
                  type: array
              type: object
            toMsp:
              properties:
                mspId:
                  description: mspId of the contract creator.
                  example: TMUS
                  type: string
                signatures:
                  items:
                    $ref: '#/components/schemas/SignatureBase'
                  minItems: 1
                  type: array
              type: object
          required:
          - fromMsp
          - toMsp
          - type
          - version
        body:
          additionalProperties: true
          type: object
        state:
          description: The State of the Contract.
          enum:
          - DRAFT
          - PENDING
          - SENT
          - RECEIVED
          type: string
      required:
      - body
      - contractId
      - header
      - state
      title: Contract JSON
      type: object
    RAWContractResponse:
      additionalProperties: false
      properties:
        contractId:
          description: ContractId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
          type: string
        raw:
          description: Original Base64 encoded RAW payload, Used for Hash calculation
            or Signing.
          example: eyJoZWFkZXIiOnsidmVyc2lvbiI6IjEuM....
          type: string
        state:
          description: The State of the Contract.
          enum:
          - DRAFT
          - PENDING
          - SENT
          - RECEIVED
          type: string
      required:
      - contractId
      - raw
      - state
      title: Contract RAW
      type: object
    ContractRequest:
      additionalProperties: false
      example:
        header:
          fromMsp:
            mspId: DTAG
            signatures:
            - role: role
              name: name
              id: id
            - role: role
              name: name
              id: id
          name: Contract with XYZ
          toMsp:
            mspId: TMUS
            signatures:
            - role: role
              name: name
              id: id
            - role: role
              name: name
              id: id
          type: contract
          version: "1.0"
        body:
          key: '{}'
      properties:
        header:
          oneOf:
          - $ref: '#/components/schemas/ContractRequest_header'
          - $ref: '#/components/schemas/ContractRequest_header2'
          type: object
        body:
          additionalProperties: true
          type: object
      required:
      - body
      - header
      title: Contract JSON for POST/PUT
      type: object
    SignatureBase:
      example:
        role: role
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
        role:
          type: string
      type: object
    SignatureResponse:
      additionalProperties: false
      example:
        signature: signature
        extra: '{"name":"john doe", "role":"manager"}'
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIICYjCCAemgAwIBA...
        signatureId: XXXXXX
        algorithm: secp384r1
      properties:
        signatureId:
          description: signatureId from \"contract"->\"signature\"->\"\<mspId\>\"[X]->\"id\"
          example: XXXXXX
          type: string
        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
        extra:
          description: Additional Key/Value from \"contract"->\"signature\"->\"\<mspId\>\"[X]->XXX,
            eg name, role
          example: '{"name":"john doe", "role":"manager"}'
          type: object
      required:
      - algorithm
      - certificate
      - extra
      - signature
      - signatureId
      title: Signature JSON
      type: object
    SignatureRequest:
      additionalProperties: false
      example:
        signature: signature
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIICYjCCAemgAwIBA...
        algorithm: secp384r1
      properties:
        algorithm:
          description: The algorithm used to sign
          example: secp384r1
          type: string
        certificate:
          description: The certificate of the signer in pem format
          example: |-
            -----BEGIN CERTIFICATE-----
            MIICYjCCAemgAwIBA...
          type: string
        signature:
          description: The digital signature over the document
          type: string
      required:
      - algorithm
      - certificate
      - signature
      title: Signature JSON for PUT
      type: object
    UsageResponse:
      example:
        usageId: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
        header:
          mspOwner:
            key: '{}'
          name: Usage, from ABC to XYZ
          type: usage
          version: "1.0"
        state: DRAFT
        body:
          key: '{}'
      properties:
        usageId:
          description: usageId in GUID format
          example: 05552c4c-e52f-4bb5-83d2-f50c86115bc8
          type: string
        header:
          $ref: '#/components/schemas/UsageResponse_header'
        body:
          additionalProperties: true
          type: object
        state:
          description: The State of the Usage.
          enum:
          - DRAFT
          - SENT
          - RECEIVED
          type: string
      required:
      - body
      - header
      - state
      - usageId
      title: Usage JSON
      type: object
    UsageRequest:
      example:
        header:
          name: Usage, from ABC to XYZ
          type: usage
          version: "1.0"
        body:
          key: '{}'
      properties:
        header:
          $ref: '#/components/schemas/UsageRequest_header'
        body:
          additionalProperties: true
          type: object
      required:
      - body
      - header
      title: Usage JSON for POST/PUT
      type: object
    UsageDiscrepancy:
      title: Usage Discrepancy JSON
      type: object
    SettlementDiscrepancy:
      title: Settlement Discrepancy JSON
      type: object
    Settlement:
      title: Settlement JSON
      type: object
    SuccessResponse:
      example:
        description: XXXX Operation successful
        status: OK
      properties:
        status:
          description: Outcome of the operation
          example: OK
          type: string
        description:
          description: Description of the operation
          example: XXXX Operation successful
          type: string
      required:
      - status
      title: Success Response JSON
      type: object
    "400ErrorResponse":
      properties:
        error:
          description: a list of pre-defined error names
          example: invalid_request
          type: string
        description:
          description: Text Description of the error
          example: The Request is invalid
          type: string
      required:
      - description
      - error
      title: 400 Error Response JSON
      type: object
    ContractRequest_header_fromMsp:
      example:
        mspId: DTAG
        signatures:
        - role: role
          name: name
          id: id
        - role: role
          name: name
          id: id
      properties:
        mspId:
          description: mspId of the contract creator.
          example: DTAG
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/SignatureBase'
          minItems: 1
          type: array
      type: object
    ContractRequest_header_toMsp:
      example:
        mspId: TMUS
        signatures:
        - role: role
          name: name
          id: id
        - role: role
          name: name
          id: id
      properties:
        mspId:
          description: mspId of the contract creator.
          example: TMUS
          type: string
        signatures:
          items:
            $ref: '#/components/schemas/SignatureBase'
          minItems: 1
          type: array
      type: object
    ContractRequest_header:
      example:
        fromMsp:
          mspId: DTAG
          signatures:
          - role: role
            name: name
            id: id
          - role: role
            name: name
            id: id
        name: Contract with XYZ
        toMsp:
          mspId: TMUS
          signatures:
          - role: role
            name: name
            id: id
          - role: role
            name: name
            id: id
        type: contract
        version: "1.0"
      properties:
        name:
          description: Human readable name for the contract.
          example: Contract with XYZ
          type: string
        version:
          description: Version of the contract
          example: "1.0"
          type: string
        type:
          description: Type of document. MUST be "contract"
          enum:
          - contract
          type: string
        fromMsp:
          $ref: '#/components/schemas/ContractRequest_header_fromMsp'
        toMsp:
          $ref: '#/components/schemas/ContractRequest_header_toMsp'
      required:
      - fromMsp
      - toMsp
      - type
      - version
    ContractRequest_header2:
      properties:
        name:
          description: Human readable name for the contract.
          example: Contract with XYZ
          type: string
        version:
          description: Version of the contract
          example: "1.0"
          type: string
        type:
          description: Type of document. MUST be "contract"
          enum:
          - contract
          type: string
        msps:
          type: object
      required:
      - msps
      - type
      - version
      type: object
    UsageResponse_header:
      example:
        mspOwner:
          key: '{}'
        name: Usage, from ABC to XYZ
        type: usage
        version: "1.0"
      properties:
        name:
          description: Human readable name for the usage.
          example: Usage, from ABC to XYZ
          type: string
        version:
          description: Version of the usage
          example: "1.0"
          type: string
        type:
          description: Type of document. MUST be "usage"
          enum:
          - usage
          type: string
        mspOwner:
          additionalProperties: true
          description: the Msp which gives the Inbound traffic data
          type: object
      required:
      - type
      - version
      type: object
    UsageRequest_header:
      example:
        name: Usage, from ABC to XYZ
        type: usage
        version: "1.0"
      properties:
        name:
          description: Human readable name for the usage.
          example: Usage, from ABC to XYZ
          type: string
        version:
          description: Version of the usage
          example: "1.0"
          type: string
        type:
          description: Type of document. MUST be "usage"
          enum:
          - usage
          type: string
      required:
      - type
      - version
      type: object
